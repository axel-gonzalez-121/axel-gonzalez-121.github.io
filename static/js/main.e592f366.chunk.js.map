{"version":3,"sources":["firebase.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","App","useState","token","setToken","useEffect","className","onClick","messaging","Notification","requestPermission","then","getToken","console","log","catch","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","update","setInterval","debug","onupdatefound","installingWorker","installing","onstatechange","state","controller","toast","info","toastId","close","autoClose","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"qNAYAA,IAASC,cAVc,CACtBC,OAAQ,0CACRC,WAAY,oCACZC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,8CAMOP,QAAf,E,eCgDeQ,MAxDf,WAAgB,IAAD,EAEYC,mBAAS,MAFrB,mBAEPC,EAFO,KAEAC,EAFA,KA2Bd,OAvBAC,qBAAU,cAMP,IAkBF,qBAAKC,UAAU,MAAf,SACC,yBAAQA,UAAU,aAAlB,UAIC,uCACA,4BAAIH,IAEJ,oDACoB,2CAGpB,6CACa,2CAGb,gDAEA,uBAEA,wBAAQI,QApCX,WACC,IAAMC,EAAYf,EAASe,YAG3BC,aAAaC,oBAAoBC,MAAK,WACrC,OAAOH,EAAUI,cACfD,MAAK,SAAAR,GACPU,QAAQC,IAAI,sBAAuBX,GAEnCC,EAASD,MACPY,OAAM,SAACC,GACTH,QAAQC,IAAI,QAASE,OAyBpB,wC,QCvCEC,EAAcC,QACU,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqChC,SAASC,EAAgBC,EAAOC,GAC/BC,UAAUC,cACRC,SAASJ,GACTb,MAAK,SAACkB,GAENA,EAAaC,SAEbC,aAAY,WACXF,EAAaC,SACbjB,QAAQmB,MAAM,2BACX,KAEJH,EAAaI,cAAgB,WAC5B,IAAMC,EAAmBL,EAAaM,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACD,cAA3BF,EAAiBG,QAChBX,UAAUC,cAAcW,YAI3BzB,QAAQC,IACP,+GAIDyB,IAAMC,KAAN,6DAAyE,CACxEC,QAAS,qBACTlC,QAAS,kBAAMY,OAAOuB,SACtBC,WAAW,IAIRlB,GAAUA,EAAOmB,UACpBnB,EAAOmB,SAASf,KAMjBhB,QAAQC,IAAI,sCAGRW,GAAUA,EAAOoB,WACpBpB,EAAOoB,UAAUhB,WAOtBd,OAAM,SAACC,GACPH,QAAQG,MAAM,4CAA6CA,MC/G9D,IAYe8B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFYnB,SAAkBjC,GACxB,GAA6C,kBAAmBC,UAAW,CAG1E,GADkB,IAAIiC,IAAIC,GAAwBzC,OAAOC,SAASyC,MACpDC,SAAW3C,OAAOC,SAAS0C,OAIxC,OAGD3C,OAAO4C,iBAAiB,QAAQ,WAC/B,IAAMvC,EAAK,UAAMoC,GAAN,sBAEP3C,IA8EP,SAAiCO,EAAOC,GAEvCuC,MAAMxC,EAAO,CACZyC,QAAS,CAAE,iBAAkB,YAE5BtD,MAAK,SAACuD,GAEN,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEpB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5C,UAAUC,cAAc4C,MAAM5D,MAAK,SAACkB,GACnCA,EAAa2C,aAAa7D,MAAK,WAC9BQ,OAAOC,SAASqD,eAKlBlD,EAAgBC,EAAOC,MAGxBV,OAAM,WACNF,QAAQC,IAAI,oEApGX4D,CAAwBlD,EAAOC,GAI/BC,UAAUC,cAAc4C,MAAM5D,MAAK,WAClCE,QAAQC,IACP,+GAMFS,EAAgBC,EAAOC,OEhC3BkD,GAKA7B,M","file":"static/js/main.e592f366.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n\tapiKey: \"AIzaSyCq6cGmEMVvlOmtoULPQInjs8uxIqrpozg\",\r\n\tauthDomain: \"thrive-push-f32e3.firebaseapp.com\",\r\n\tprojectId: \"thrive-push-f32e3\",\r\n\tstorageBucket: \"thrive-push-f32e3.appspot.com\",\r\n\tmessagingSenderId: \"224749645363\",\r\n\tappId: \"1:224749645363:web:6475e155779ebd492b3d46\"\r\n};\r\n \r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { useState, useEffect } from 'react';\n// import * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport firebase from './firebase';\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n\tconst [token, setToken] = useState(null);\n\n\tuseEffect(() => {\n\t\t// if (globalState.userSession) {\n\t\t// \tinitialRequest();\n\t\t// }\n\t\t// serviceWorkerRegistration.register();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tfunction enableNotifications() {\n\t\tconst messaging = firebase.messaging();\n\n\t\t// messaging.requestPermission().then( () => {\n\t\tNotification.requestPermission().then(() => {\n\t\t\treturn messaging.getToken();\n\t\t}).then(token => {\n\t\t\tconsole.log('Token de registro: ', token);\n\n\t\t\tsetToken(token);\n\t\t}).catch((error) => {\n\t\t\tconsole.log('Error', error);\n\t\t});\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\n\t\t\t\t{/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n\n\t\t\t\t<p>Token:</p>\n\t\t\t\t<p>{token}</p>\n\n\t\t\t\t<p>\n\t\t\t\t\tPush Notifications <code>test</code>\n\t\t\t\t</p>\n\n\t\t\t\t<p>\n\t\t\t\t\tPWA Updates <code>test</code>\n\t\t\t\t</p>\n\n\t\t\t\t<h3>LALALAL TEST 2</h3>\n\n\t\t\t\t<br />\n\n\t\t\t\t<button onClick={enableNotifications}>Enable notifications</button>\n\n\t\t\t</header>\n\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nimport React from 'react'\nimport { toast } from 'react-toastify'\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.0/8 are considered localhost for IPv4.\n\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://cra.link/PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\t// Check for updates at start.\n\t\t\tregistration.update();\n\t\t\t// Check for updates every 5 min.\n\t\t\tsetInterval(() => {\n\t\t\t\tregistration.update();\n\t\t\t\tconsole.debug(\"Checked for update...\");\n\t\t\t}, (1000 * 60) * 1);\n\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://cra.link/PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\ttoast.info(`Update available! To update, close all windows and reopen.`, {\n\t\t\t\t\t\t\t\ttoastId: \"appUpdateAvailable\", // Prevent duplicate toasts\n\t\t\t\t\t\t\t\tonClick: () => window.close(), // Closes windows on click\n\t\t\t\t\t\t\t\tautoClose: false // Prevents toast from auto closing\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n\n// serviceWorkerRegistration.unregister();\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}